

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected;
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROGRAM;
terminal BREAK;
terminal CLASS;
terminal ELSE;
terminal CONST;
terminal IF;
terminal SWITCH;
terminal DO;
terminal WHILE;
terminal NEW;
terminal PRINT;
terminal READ;
terminal RETURN;
terminal VOID;
terminal EXTENDS;
terminal CONTINUE;
terminal CASE;
terminal String IDENT ;
terminal Integer NUMBER ;
terminal String CHAR ;
terminal String BOOLEAN ;
terminal ADD;
terminal SUB;
terminal MUL;
terminal DIV;
terminal MOD;
terminal EQ;
terminal NEQ;
terminal G;
terminal GE;
terminal L;
terminal LE;
terminal ANDAND;
terminal OROR;
terminal DODELA;
terminal INC;
terminal DEC;
terminal TZ;
terminal COMMA;
terminal DOT;
terminal LZAGRADA;
terminal DZAGRADA;
terminal LUGLASTA;
terminal DUGLASTA;
terminal LVITICASTA;
terminal DVITICASTA;
terminal UPITNIK;
terminal DVOTACKA;
terminal ENUM;


nonterminal OmniList , VarDeclList , VarDecl , MoreVarList , ConstDecl , MoreConstList , ClassDecl ;
nonterminal MaybeMethodDecl , MethodDeclList , UglasteFormPars , MaybeExtendsType , MaybeNumCharBool , UglasteList ;
nonterminal FormPars , MaybeFormPars , Statement , MaybeSwitch , MaybePrint , MaybeStatement , MaybeElseStatement , DesignatorStatement ;
nonterminal MaybeAssignActAS , ActPars , MaybeZarezExpr , Condition , MaybeOrOr , CondTerm , MaybeAndAnd ;
nonterminal MaybeSub , DesignatorList , MaybeMulopFactor , MaybeNumCharBoolPrvi , IzdvojiLzagrad , PocetakDoWhile , PocetakIF ;
nonterminal MaybeUgExpr , MaybeZagrada , MaybeActPars , Assignop , Relop , Addop , Mulop , TipTipic , MulopFactor , ElseSmena ;
nonterminal rs.etf.pp1.symboltable.concepts.Struct UslovTernarni , PrviTernarni , DrugiTernarni , Erroric , VarDeclPrvi , FormParsPrvi ;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName , Program , MethodDecl , MethodTypeName , MethodVoidName , Designator , DesignatorIdent ;
nonterminal  rs.etf.pp1.symboltable.concepts.Struct Type , Term , Factor , Expr , Expr1 , MaybeAddopTerms , MaybeExpr , MaybeRelopExpr , CondFact ;
precedence left ELSE;

Program ::= (Program) PROGRAM ProgName:p OmniList LVITICASTA MethodDeclList DVITICASTA;

ProgName ::= (ProgName) IDENT:progName ;


OmniList ::= (OmniListEConst) OmniList ConstDecl 
			| 
			(OmniListEVar) OmniList VarDecl
			| 
			(OmniListEClass) OmniList ClassDecl
			|		
			(NoMoreOmni) /* epsilon */
			; 
			
VarDeclList ::= (VarDeclarations) VarDeclList VarDecl
			|
			(NoVarDecl) /* epsilon */
			;


VarDecl ::= (XVarDecl) TipTipic VarDeclPrvi MoreVarList TZ ;
			
VarDeclPrvi ::= (DeklaracijaPrvog) IDENT UglasteList 
				|
				error:her {: parser.report_error("Izvrsen oporavak do , ili ; iz liste u liniji " + herleft ,null);  :} 
				;

TipTipic ::= (Tipovi) Type:tip;


MoreVarList ::= (MoreVars) MoreVarList COMMA IDENT:mvl UglasteList
				|
				(ErorMorVar) MoreVarList COMMA Erroric
				|
				(NoMoreVars) /* epsilon */
				;
				
Erroric ::= (Erroric) error:her {: parser.report_error("MOREVARLIST Izvrsen oporavak do , ili ; iz liste u liniji " + herleft ,null);  :} ;
				
ConstDecl ::= (ConstDecl) CONST TipTipic IDENT:cdecl DODELA MaybeNumCharBoolPrvi MoreConstList TZ;

MaybeNumCharBoolPrvi ::= (MaybeNumPrvi) NUMBER:nprvi
					|
					(MaybeCharPrvi) CHAR:charvrednostprvi
					|
					(MaybeBooleanPrvi) BOOLEAN:vrednostbprvi
					;

MoreConstList ::= (MoreConsts) MoreConstList COMMA IDENT:mcl DODELA MaybeNumCharBool
				|
				(NoMoreConsts) /* epsilon */
				;

ClassDecl ::= (ClassDecl) CLASS IDENT:cl MaybeExtendsType LVITICASTA VarDeclList MaybeMethodDecl DVITICASTA;

MaybeMethodDecl ::= (XMaybeMethodDecl) LVITICASTA MethodDeclList DVITICASTA
					|
					(NotMaybeMethodDecl) /* epsilon */
					;
		
MethodDeclList ::= (XMethodDeclList) MethodDeclList MethodDecl
			|
			(NoMethodDeclList) /* epsilon */
			;

MethodDecl ::= (MethodDeclType) MethodTypeName LZAGRADA UglasteFormPars DZAGRADA VarDeclList LVITICASTA MaybeStatement DVITICASTA
				|
				(MethodDeclVoid) MethodVoidName LZAGRADA UglasteFormPars DZAGRADA VarDeclList LVITICASTA MaybeStatement DVITICASTA
				;
				
MethodTypeName ::= (MethodTypeName) Type:retType IDENT:mdname ;
MethodVoidName ::= (MethodVoidName) VOID IDENT:mdvoid ;

UglasteFormPars ::= (XUglasteFormPars) FormPars
					|
					(NotUglasteFormPars) /* epsilon */
					;

MaybeExtendsType ::= (XMaybeExtendsType) EXTENDS Type
					|
					(NotMaybeExtendsType) /* epsilon */
					;

MaybeNumCharBool ::= (MaybeNum) NUMBER:n
					|
					(MaybeChar) CHAR:charvrednost
					|
					(MaybeBoolean) BOOLEAN:vrednostb
					;
					
UglasteList ::= (Uglaste) LUGLASTA DUGLASTA
			|
			(NoUglasta) /* epsilon */
			;
			
FormPars ::= (FormPars) TipTipic FormParsPrvi MaybeFormPars;

FormParsPrvi ::= (PrvakFormA) IDENT:formpars UglasteList ;

MaybeFormPars ::= (XMaybeFormPars) MaybeFormPars COMMA TipTipic IDENT:mformpars UglasteList
				|
				(NotMaybeFormPars) /* epsilon */
				;
			
Statement ::= (StatementDesignator) DesignatorStatement TZ
			| 
			(StatementIf) PocetakIF LZAGRADA Condition DZAGRADA Statement MaybeElseStatement
			|
			(StatementDoWhile) PocetakDoWhile Statement WHILE LZAGRADA Condition DZAGRADA TZ
			|
			(StatementSwitch) SWITCH LZAGRADA Expr DZAGRADA LVITICASTA MaybeSwitch DVITICASTA
			|
			(StatementBreak) BREAK TZ
			|
			(StatementContinue) CONTINUE TZ
			|
			(StatementReturn) RETURN MaybeExpr TZ
			|
			(StatementRead) READ LZAGRADA Designator DZAGRADA TZ
			|
			(StatementPrint) PRINT LZAGRADA Expr MaybePrint DZAGRADA TZ
			|
			(StatementStatement) LVITICASTA MaybeStatement DVITICASTA
			;	
			
PocetakDoWhile ::= (PocDoWh) DO ;
PocetakIF ::= (Smenasaifom) IF ;
			
MaybeSwitch ::= (XMaybeSwitch) MaybeSwitch CASE NUMBER DVOTACKA MaybeStatement
			|
			(NotMaybeSwitch) /* epsilon */
			;

MaybePrint ::= (XMaybePrint) COMMA NUMBER
				|
				(NotMaybePrint) /* epsilon */
				;

MaybeStatement ::= (XMaybeStatement) MaybeStatement Statement
				|
				(NotMaybeStatement) /* epsilon */
				;
			
MaybeElseStatement ::= (XMaybeElseStatement) ElseSmena Statement
					|
					(NotMaybeElseStatement) /* epsilon */
					;
					
ElseSmena ::= (ElseSmena) ELSE ;
			
DesignatorStatement ::= (DesStatAssign) Designator:dest Assignop Expr:e 
					| 
					(DesStatMayActPars) Designator LZAGRADA MaybeActPars DZAGRADA 
					|
					(DesStatINC) Designator INC 
					|
					(DesStatDEC) Designator DEC 
					|
					(ErrorDesign) Designator:dest Assignop Erroric
					;
					
		
ActPars ::= (ActPars) Expr MaybeZarezExpr;

MaybeZarezExpr ::= (XMaybeZarezExpr) MaybeZarezExpr COMMA Expr
				|
				(NotMaybeZarezExpr) /* epsilon */
				;
			
Condition ::= (Condition) CondTerm MaybeOrOr;

MaybeOrOr ::= (XMaybeOrOr) MaybeOrOr OROR CondTerm
			|
			(NotMaybeOrOr) /* epsilon */
			;
			
CondTerm ::= (CondTerm) CondFact MaybeAndAnd;

MaybeAndAnd ::= (XMaybeAndAnd) MaybeAndAnd ANDAND CondFact
			|
			(NotMaybeAndAnd) /* epsilon */
			;
			
CondFact ::= (CondFact) Expr MaybeRelopExpr;

MaybeRelopExpr ::= (XMaybeRelopExpr) Relop Expr
				|
				(NotMaybeRE) /* epsilon */
				;

Expr ::= (ExprZiza1) UslovTernarni UPITNIK PrviTernarni DVOTACKA DrugiTernarni
			|
			(ExprZiza2) Expr1
			;	

UslovTernarni ::= (UslovTernarni) Expr1 ;

PrviTernarni ::= (PrviTernarni) Expr1 ;

DrugiTernarni ::= (DrugiTernarni) Expr1 ;

Expr1 ::= (Expr1) MaybeSub Term MaybeAddopTerms;


MaybeAddopTerms ::= (XMaybeAddopTerms) MaybeAddopTerms Addop Term
					|
					(NoMaybeAT) /* epsilon */
					;

MaybeSub ::= (XMaybeSub) SUB
			|
			(NotMaybeSub) /* epsilon */ 
			;

Type ::= (Type) IDENT:typeName;

Designator ::= (Designator) DesignatorIdent DesignatorList;

DesignatorIdent ::= (DesigIdent) IDENT:designatorName ;

DesignatorList ::= (XDesignatorList1) DesignatorList DOT IDENT:designatorlist
				|
				(XDesignatorList2) DesignatorList LUGLASTA Expr DUGLASTA
				|
				(NoDesignatorList) /* epsilon */
				;
				
Term ::= (Term) Factor MaybeMulopFactor;

MaybeMulopFactor ::= (XMaybeMulopFactor) MaybeMulopFactor MulopFactor
					|
					(NotMMFactor) /* epsilon */
					;
				
MulopFactor ::= (MulopFactor) Mulop Factor ;

Factor ::= (FactorDesignator) Designator MaybeZagrada
			|
			(FactorNumConst) NUMBER
			|
			(FactorCharConst) CHAR
			|
			(FactorBooleanConst) BOOLEAN:boolic
			|
			(FactorNEW) NEW Type MaybeUgExpr
			|
			(FactorExpr) IzdvojiLzagrad Expr DZAGRADA
			;
			
IzdvojiLzagrad ::= (Izdvojenalzagrada) LZAGRADA ;
			
MaybeUgExpr ::= (XMaybeUgExpr) LUGLASTA Expr DUGLASTA
			 |
			 (NotMaybeUgExpr) /* epsilon */
			 ;
MaybeExpr ::= (XMaybeExpr) Expr 
			 |
			 (NotMaybeExpr) /* epsilon */
			 ;
MaybeZagrada ::= (XMaybeZagrada) LZAGRADA MaybeActPars DZAGRADA
				|
				(NotMaybeZagrada) /* epsilon */
				;

MaybeActPars ::= (XMaybeActPars) ActPars
				|
				(NotMaybeActPars) /* epsilon */
				;

Assignop ::= (Jednakost) DODELA;

Relop ::=(Eq) EQ
		| 
		(Neq) NEQ
		| 
		(G) G
		| 
		(Ge) GE
		| 
		(L) L
		| 
		(Le) LE
		;

Addop ::= (Add) ADD
		| 
		(Sub) SUB
		;

Mulop ::= (Mul) MUL
		| 
		(Div) DIV
		| 
		(Mod) MOD
		;
		

